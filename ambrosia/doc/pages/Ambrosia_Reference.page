[[Category:Ambrosia]]
This '''Ambrosia reference''' describes the language
used in the Ambrosia modeling system. The Ambrosia modeling environment
provides an interface to existing rendering systems through an extensible
modeling language that we refer to as ''Ambrosia''.

Ambrosia is an extension of [[Python]] and environment used to traditionally
program computers. 

= Overview =
Ambrosia is an extension of the [[Python|Python Programming Language]] developed by [[Guido van Rossum]].  Most features of [[Python]] are available in [[Ambrosia]].  We describe, here, the features most useful to modelers.

Values in Ambrosia include numbers (e.g. 1, -3, 3.1415); booleans ('''true''',
written True and '''false''', written False); strings (e.g. "Now is a good
time for all modelers."); symbols (e.g. body, parasol, jackBeNimble,
jack-o-lantern, etc.); lists of values (listed within paretheses); procedures,
and objects.

All values encountered in Ambrosia either been previously defined or are the
result of evaluating Ambrosia expressions.  The simplest expression is a value
typed at the Ambrosia prompt (>): > 3.14159 3.14159 Note that when Ambrosia is
run interactively, the value of any value-producing expression is printed.
This makes it possible for the modeler to verify the correctness of an
expression.

Other values are the result of evaluating expressions.
Typically, an expression is typed in paretheses:
 > (sqrt 2)
 1.4142135623730951
though Ambrosia allows the use of other forms of brackets including square brackets and curly braces.

Each of the following sections documents the variety of expressions you may use in Ambrosia modeling.

== Prefix Notation ==
Ambrosia uses prefix notation.  That means that the first symbol in a parenthesized expression is the action or ''function'' that will applied to the remaining symbols, the ''arguments''.  Typically, the function can be thought of as a ''verb'', while the arguments are expressions whose values may be thought of as nouns.  Thus "add 2 and 3" is written
 > (+ 2 3)
 5
and "compute the factors of 7" would be written:
 > (factor 28)
 (1 2 4 7 14 28)

== Identifiers ==
Identifiers are an important part of making a model readable.  Identifiers are names we give to expression values.  By associating a identifier with a value, we help to document our model and to make our model readable by others.  Identifiers can be assigned a value with the '''define''' expression:
 > (define pi 3.141592653)
 3.141592653
 > pi
 3.141592653

Identifiers are the composition of one or more letters or symbols.  Identifiers may contains numeric digits, as long as they do not appear as the starting symbol.  The modeler must be careful to make sure that
# The identifier is ''meaningful''.  Because identifiers are an important part of documenting one's model, it is important that the sematic of the identifer inform the purpose of the value.
# The identifier is ''unique''.  There are many symbols in Ambrosia, so it is important to avoid naming values with identifiers that would otherwise be useful to the modeler.  For example, the expression
 > (define sin (sqrt (- 1 (sqr (cos theta)))))
makes it impossible to use the sine-computing function, sin.

== Constants ==

Ambrosia provides a number of useful values that have specific names:
 > pi ; the ratio of the circumfrence of a circle to its diameter
 3.141592653589793
 > golden ; the ideal ratio 1/golden = phi = 1 + golden
 0.6180339887498948
 > phi
 1.6180339887498948
 > e ; Euler's constant: the bound on the ultimate growth of an organism that grows by 1/n for n units of time.
 2.718281828459045

= Mathematical Expressions =

Calculation is an important part of modeling virutal objects, and Ambrosia supports the modeler with a wide variety of mathematical functions.

== Simple Calculation ==
=== Addition, Subtraction, Multiplication, and Division ===
Ambrosia supports the standard operations of addition (+); subtraction (-); multiplication (*); and division (/).  The following expression, for example, computes the average of the values 3.5 and 4.1:
 > (/ (+ 3.5 4.1) 2)
 3.8

Each of these operations can take many arguments.  To compute the average of 6 values, for example, we might use
 > (/ (+ 88 85 96 93 74 80) 6)
 86
This calculation computes exactly the same result as
 > (/ (+ (+ (+ (+ (+ 88 85) 96) 93) 74) 80) 6)
 86
though the first approach is much easier to read.  This is one of the benifits of prefix expression.

To change the sign of a value, use the unary (one argument) form of -:
 > (/ (+ (- b) (sqrt (- (sqr b) (* 4 a c)))) (* 2 a))

Ambrosia does not have any notion of operator order or ''precedence''.  Instead, interior expressions are
evaluated and the results are used as arguments in containing expressions.
 > (+ 10 12) (* 3 4) ; two unnested expressions computing two results
 22
 12
 > (+ 10 (* 3 4)) ; computes 10+(3*4)
 22
 > (/ 2 (+ 1 (sqrt 5))) ; compute 2/(1+sqrt(5)); the golden proportion
 0.6180339887498948

Python computes exact answers whenever possible.  Adding a decimal point to your numbers will force them
to be ''inexact'', which forces an inexact decimal answer.
 > (* 10.0 (+ 3 4)) ; computes 10.0*(3+4)
 70.0
 > (+ 10 12.6 (* 3 4)) ; computes 10+12.6+(3*4)
 34.6
 > (/ 4181. 6765.)
 0.6180339985218034

=== Quotients and Remainders ===
When computing the quotient of two integers, it is sometimes useful to compute the integer part of the quotient and the remainder separately.

The <code>quotient</code> function computes the integer portion of the quotient of two integers:
 > (quotient 4 3)
 1
 > (quotient -4 3)
 -1

The <code>modulo</code> function computes the remainder of the division operation:
 > (modulo 4 3)
 1
 > (modulo -4 3)
 2
The sign of the result of the <code>modulo</code> function is the same as the sign of its second argument.

The <code>remainder</code> function also computes a remainder, but its sign is the same as the sign of its ''first'' argument.
 > (modulo 4 3)
 1
 > (modulo -4 3)
 -1

Most modeling applications can avoid the confusion associated with the signs of quotients and remainders by working with non-negative arguments.

=== Absolute value ===
To compute the magnitude or ''absolute value'' of a number, we use <code>abs</code>:
 > (abs 7)
 7
 > (abs -1.618033988749895)
 1.618033988749895

=== Rounding and Truncating ===
Many calculations generate numbers with fractional parts.  It is frequently useful to work with integers.  One example is the alignment of objects with an integer coordinate system.

Two functions compute the nearest integer to a number.  The <code>floor</code> of a value n is the closest integer  not exceeding n:
 > (floor 1.5)
 1.0
 > (floor 1)
 1
 > (floor 0.99999)
 0.0
 > (floor -1.6)
 -2.0
On the number line, the value of the <code>floor</code> is never to the right of n.

The <code>ceiling</code> of a value n is the closest integer not less than n:
 > (ceiling 1.5)
 2.0
 > (ceiling 1)
 1
 > (ceiling 0.99999)
 1
 > (ceiling -1.6)
 -1
On a number line, the value of the <code>ceiling</code> is never to the left of n.

The <code>truncate</code> operation returns the integer portion of a number:
 > (truncate 1.5)
 1.0
 > (truncate 1)
 1
 > (truncate 0.99999)
 0.0
 > (truncate -1.6)
 -1.0
The value returned by this function is never farther from 0 than n.

It is often useful to find an integer close to n.  The <code>round</code> function accomplishes this:
 > (round 1.5)
 2.0
 > (round 1)
 1
 > (round 0.99999)
 1.0
 > (round -1.6)
 -2
 > (round -1.5)
 -1
Rounding always returns a closest integer.  When there are two choices, it returns the value farther from 0.

== Least Common Multiples, Greatest Common Divisors, Factors, and Primes ==

Each integer has a list of factors: those positive integers that divide it evenly.  The <code>factor</code> method computes the list of positive factors of a number:
 > (factor 42)
 (1 2 3 6 7 14 21 42)
 > (factor 7)
 (1 7)
 > (factor 1)
 (1)
 > (factor 0) ; a special case
 (0)

A number is prime if it has a list of exactly two factors: 1 and itself:
 > (prime? 42)
 #f
 > (prime? 7)
 #t
 > (prime? 1) ; 1 has one factor
 #f
 > (prime? 0) ; 0 has one factor
 #f

The ''least common multiple'' of a list of integer arguments is the smallest integer with
the arguments among its factors:
 > (lcm 3 6 7)
 42
 > (lcm 1 7)
 7

The ''greatest common divisor'' of a list of integer arguments is the largest number that evenly divides each of the arguments:
 > (gcd 42 6 7)
 1
 > (gcd 42 16)
 2

An integer n is a ''perfect number'' if its factors (other than n) add up to n.  You can test if a number is perfect:
 > (perfect? 5) ; other factors (1)
 #f
 > (perfect? 6) ; other factors: (1 2 3)
 #t

== Trigonometric Operations ==

Trigonometry plays an important role in modeling, and Ambrosia provides a number of trigonometric functions.

''All trigonometric functions assume angles represented in radians.''  If you wish to call a trigonometric function using an angle in degrees, you should convert the angle from degrees to radians (see <code>deg2rad</code>).  Likewise, inverse functions return angles in radians.  You must convert these angles to degrees (see <code>rad2deg</code>).

An angle, measured in radians, is exactly the length of the arc of the unit circle spanned by the angle.

The <code>sin</code> computes the sine of an angle, given in radians.  The sine of an angle is the y-coordinate of the point of intersection an angle makes with the unit circle.
 > (sin 0)
 0.0
 > (sin (/ pi 2))
 1.0
 > (sin (deg2rad 180)) ; equivalent to: (sin pi)
 0.0
For very small values of <code>theta</code>, the <code>(sin theta)</code> is approximately <code>theta</code>.

The <code>cos</code> computes the cosine of an angle, given in radians.  The cosine of an angle is the x-coordinate of the point of intersection an angle makes with the unit circle.
 > (cos 0)
 1.0
 > (cos (/ pi 2))
 0.0
 > (cos (deg2rad 45)) ; equivalent to: (cos (/ pi 4))

The <code>tan</code> function computes the tangent of an angle, given in radians.  The tangent of an angle <code>theta</code> is the slope of a line that make an angle <code>theta</code> with the positive x axis.  For example,
 > (tan (deg2rad 45)) ; this angle has slope 1
 1.0
 > (tan 0)
 0.0

The <code>(acos x)</code> function returns that angle that has x-coordinate x.  The angle is in radians, and falls between 0 and &pi;.
 > (acos 1)
 0.0
 > (acos -1)
 3.141592653589793
 > (rad2deg (acos 0.5)) ; then angle (in degrees) whose intersection is directly above x=0.5
 60.0

The <code>(asin y)</code> function returns the angle that intersection the unit circle at coordinate y.  The angle is in radians, between -&pi;/2 and &pi;/2.
 > (rad2deg (asin 1))
 90
 > (asin -1)
 -1.5707963267948966

The <code>(atan s)</code> function returns the angle (in radians) the line with slope s makes with the positive x-axis.
 > (atan 0)
 0.0
 > (rad2deg (atan 1))
 45.0
The value of angles returned are values between -&pi;/2 and &pi;/2.

== Powers and Logarithms ==
Ambrosia supports the computation of powers and logarithms.  These functions are inverses of each other.

The <code>(log n)</code> function computes the natural logarithm of a number n.
 > (log 1)
 0.0
 > (log e)
 1.0
 > (log 10)
 2.302585092994046
'''CHECK''' The log computes the ''intrinsic growth rate'', r, of a system.  If, for example, an organism increases in size by 1/n for r*n time units, it will increase to approximately <code>(log r)</code> times its previous size.

To compute the logarithm in another base, b, you must divide the (log n) by (log b):
 > (/ (log 100) (log 10)) ; log (base 10) of 100 is 2
 2.0

The <code>(exp x)</code> function raises e to the power x.
 > (exp 0)
 1.0
 > (exp 1)
 2.718281828459045
 > (exp (log 10))
 10.0

The <code>(expt b x)</code> computes b to the power x.
 > (expt 10 2)
 100.0
 > (expt e (log 3))
 3.0
 > (expt 10 -4)
 0.0001

= Control Expressions =

Typically, when Ambrosia is faced with interpreting a number of expressions, they are interpreted one at a time from top to the bottom.  Control expressions, or ''control constructs'', allow the modeler to modify this behavior.  For example, Ambrosia can evaluate a question or ''condition'' and, based on that decision, decide to reevaluation an expression until the condition is met.

=== Begin Expressions: Shrinkwrap ===
Frequently it is useful to wrap many expressions into one.
The <code>begin</code> expression has the following form:
 (begin
   {expression 1}
   {expression 2}
   ; ...
   {expression n})
When a <code>begin</code> expression is evaluated, each of the inner expressions is evaluated in turn.  The result of the last expression is returned as the result of the entire <code>begin</code>.
 > (begin 1)
 1
 > (begin 1 2 3)
 3
Many control constructs execute a single expression.  You can insert multiple expressions in these locations by ''shrink-wrapping'' them with a begin. 

=== If Expressions: Decision Making ===
Modelers may find it useful to compute one of two different values, the choice determined by a condition.
The appropriate expression is an <code>if</code> expression.

The if expression has two different forms:
 (if {condition} {then expression})
and
 (if {condition} {then expression} {else expression})
The if expression first evaluates the condition.
If it is true, the then expression is computed as the result.
If it is false, and there is no else expression, false (#f) is returned.
If it is false, and there is an else expression, it is evaluated and the computed result is returned.

Here is how one might compute the absolute value of a number n:
 (if (>= n 0)
     n
     (- n))
If n is nonnegative, it is returned as the result, otherwise negative n is returned.  Note how the indentation is used to emphasize the two expressions.

When multiple expressions must appear in either the then or else expression, a begin can be used to group or shrinkwrap the m into a single expression.
 (if (prime n)
   (begin
     (if (= 2 n) (display "n is an even ")
                 (display "n is an odd "))
     (display "number")))

=== Conditional Expressions ===

Sometimes it is useful to handle many different conditions in a single expression.
Consider the following complex '''if''' expression that checks for a variety of characteristics.
 (if (= n 1)
   (display "one")
   (if (= n 2)
      (display "two")
      (if (= n 3)
         (display "three")
         (if (< n 1) (display "small")
            (display "large")
         ))))
The expression prints "small" for values less than 1, "large" for values greater than 3, and "one", "two", or "three" depending on the value.

Such expressions are common, but hard to read when cast as nested if expressions.  Instead, it's useful to use a cond expression.  A cond expression has several condition-statement pairs that are evaluated in sequence until one is found. It is has the following form
 (cond ({cond1} {expression-1})
       ({cond2} {expression-2})
       ; ...
       ({condn} {expression-n})
       (else {else-expression}))
The else expression is optional, but it is best to provide one to catch missed "cases".

The cond expression equivalent to the above nested if is cast as follows:
 (cond ((= n 1) (display "one"))
       ((= n 2) (display "two"))
       ((= n 3) (display "three"))
       ((< n 1) (display small))
       (else (display "large"))

=== Looping constructs ===

= Geometric Functions and Transformations =

= Procedure Definition =

= Ambrosia Objects =

To understand objects in [[Ambrosia]] visit the [[Modeling Classes]] page.
